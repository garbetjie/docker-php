daemon              off;
user                www-data;
worker_processes    auto;
error_log           /dev/stderr error;
pid                 /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    sendfile off;
    keepalive_timeout 620;  # See https://cloud.google.com/load-balancing/docs/https/#timeouts_and_retries for justification.
    types_hash_max_size 2048;
    server_tokens off;
    server_names_hash_bucket_size 128;
    merge_slashes off;

    log_format main escape=json '{'
        '"msec":$msec,'

        '"server":{'
            '"protocol":"$server_protocol",'
            '"port":$server_port'
        '},'

        '"request":{'
            '"method":"$request_method",'
            '"uri":"$request_uri",'
            '"host":"$http_host",'
            '"user_agent":"$http_user_agent",'
            '"remote_addr":"$remote_addr",'
            '"referer":"$http_referer",'
            '"x_forwarded_for":"$http_x_forwarded_for",'
            '"bytes_received":$request_length'
        '},'

        '"response":{'
            '"status":"$status",'
            '"bytes_sent":$bytes_sent,'
            '"bytes_sent_body":$body_bytes_sent'
        '},'

        '"upstream":{'
            '"address":"$upstream_addr",'
            '"connect_time":"$upstream_connect_time",'
            '"total_bytes_sent":"$upstream_bytes_sent",'
            '"total_bytes_received":"$upstream_bytes_received",'
            '"response_bytes_received":"$upstream_response_length",'
            '"response_time":"$upstream_response_time"'
        '}'
    '}';

    include mime.types;
    default_type text/plain;
    access_log /dev/stdout main;

    gzip on;
    gzip_types <%= $GZIP_TYPES %>;
    gzip_disable "msie6";
    gzip_proxied <%= $GZIP_PROXIED %>;
    expires off;

    server {
        listen <%= $PORT %> deferred default_server;

        root <%= $ROOT %>;
        charset utf8;
        client_max_body_size <%= $MAX_REQUEST_SIZE %>;

        add_header X-XSS-Protection 1;
        add_header X-Frame-Options SAMEORIGIN;

        try_files $uri $uri/ @php;
        index index.html index.php;

        location @php {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            include fastcgi.conf;

            fastcgi_param   SCRIPT_FILENAME         $document_root/index.php;
            fastcgi_param   SCRIPT_NAME             index.php;
        }

        location ~ \.php {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            include fastcgi.conf;
        }

        include conf.d/*.conf;
    }
}
