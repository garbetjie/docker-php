#!/usr/bin/env sh

# If New Relic is disabled, then don't do anything.
if [ "$NEWRELIC_ENABLED" != "true" ]; then
  exit 0
fi

# If there is a ":" in the daemon's address, then it means we're connecting to a remote daemon, and we shouldn't start it
# locally.
if ! echo "$NEWRELIC_DAEMON_PORT" | grep ":"; then
  /opt/newrelic/daemon.x64 -c /opt/newrelic/newrelic.cfg
fi

# Wait for the length of time that is specified for the daemon to start listening.
if [ "$NEWRELIC_DAEMON_WAIT" = "" ]; then
  NEWRELIC_DAEMON_WAIT=5
fi

# if port[0] == @ -> --abstract-domain-socket
# if port contains / -> --unix-socket
# else, is host.
connect_args=""
connect_host="http://collector.newrelic.com"

# Abstract UNIX socket.
if [ "$(echo "$NEWRELIC_DAEMON_PORT" | head -c 1)" = "@" ]; then
  connect_args='--abstract-unix-socket '"$(echo "$NEWRELIC_DAEMON_PORT" | tail -c +2)"
# UNIX socket.
elif echo "$NEWRELIC_DAEMON_PORT" | grep -q -F "/"; then
  connect_args='--unix-socket '"$NEWRELIC_DAEMON_PORT"
# Port only.
elif echo "$NEWRELIC_DAEMON_PORT" | grep -q -E '^[[:digit:]]{1,}$'; then
  connect_host="http://127.0.0.1:${NEWRELIC_DAEMON_PORT}"
# Remote host
else
  connect_host="http://${NEWRELIC_DAEMON_PORT}"
fi


# Attempt
started="$(date +%s)"
while : ; do
  # shellcheck disable=SC2086
  curl $connect_args --connect-timeout "$NEWRELIC_DAEMON_WAIT" "$connect_host"
  exit_status=$?

  # If we receive `curl: (56) Recv failure: Connection reset by peer`, then we know that we can connect to the daemon.
  if [ $exit_status = 56 ]; then
    exit 0
  fi

  if [ $(($(date +%s) - started)) -lt "$NEWRELIC_DAEMON_WAIT" ]; then
    sleep 1
  else
    break
  fi
done

# Exit with non-zero status code if we can't connect in the required time-frame.
exit 1
